# -*- coding: utf-8 -*-
"""disease_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EzCAhbqvR66gHutHDn7W71h7nFct-tbi
"""

from google.colab import files

uploaded = files.upload()  # This will prompt you to upload files manually

datasets = {
    'description': description,
    'diets': diets,
    'medications': medications,
    'precautions_df': precautions_df,
    'symptoms_df': symptoms_df,
    'symptom_severity': symptom_severity,
    'training': training,
    'workout_df': workout_df
}

for name, df in datasets.items():
    print(f"--- {name} ---")
    print(df.info())
    print(df.head())
    print("\n")
# Check the first few rows of one dataframe to confirm
print(description.head())

print(training.columns)
print(training['prognosis'].value_counts())


print("symptoms_df columns:", symptoms_df.columns)

# Display column names
print("Description columns:", description.columns.tolist())
print("Diets columns:", diets.columns.tolist())
print("Medications columns:", medications.columns.tolist())
print("Precautions columns:", precautions_df.columns.tolist())
print("Symptoms columns:", symptoms_df.columns.tolist())
print("Symptom Severity columns:", symptom_severity.columns.tolist())
print("Training columns:", training.columns.tolist())
print("Workout columns:", workout_df.columns.tolist())

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

# Symptoms are all columns except 'prognosis'
symptom_columns = training.columns[:-1].tolist()

X = training[symptom_columns]
y = training['prognosis']


le = LabelEncoder()
y_encoded = le.fit_transform(y)


X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)



y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred, target_names=le.classes_))

import joblib

joblib.dump(model, 'disease_prediction_model.pkl')
joblib.dump(le, 'label_encoder.pkl')

from google.colab import files

files.download('disease_prediction_model.pkl')
files.download('label_encoder.pkl')

#ðŸ“ˆ Exploratory Data Analysis (EDA)
#ðŸ“Š Disease Frequency
import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(12,6))
sns.countplot(data=training, y='prognosis', order=training['prognosis'].value_counts().index)
plt.title('Disease Occurrence in Dataset')
plt.tight_layout()
plt.show()

#ðŸ“‰ Symptom Correlation Heatmap
import seaborn as sns

corr = training.drop(columns='prognosis').corr()
plt.figure(figsize=(15,10))
sns.heatmap(corr, cmap='coolwarm')
plt.title('Symptom Correlation Matrix')
plt.show()

#âœ… Logistic Regression
from sklearn.linear_model import LogisticRegression
model_lr = LogisticRegression(max_iter=1000)
model_lr.fit(X_train, y_train)

#âœ… Support Vector Machine
from sklearn.svm import SVC
model_svm = SVC()
model_svm.fit(X_train, y_train)

#âœ… XGBoost
from xgboost import XGBClassifier
model_xgb = XGBClassifier()
model_xgb.fit(X_train, y_train)

